<!DOCTYPE html>
<html lang="en">

<%- include("./partials/head.ejs") %>

<body>
    <%- include("./partials/nav.ejs") %>
    <section class="pocetakKviza container" id="start-container">
        <div>
            <div class="mb-4">
                <h1>Dobrodo≈°li u GeoGuess Kviz! üåç</h1>
                <p>Spremite se da testirate svoje znanje o geografiji i osvajate bodove!</p>
            </div>

            <div>
                <h2>Pravila kviza:</h2>
                <p class="mb-3"><strong>Vreme za igru:</strong> Imate taƒçno <strong>15 minuta</strong> da zavr≈°ite kviz. Ako ne zavr≈°ite na vreme, va≈° rezultat ƒáe se automatski predati.</p>
                <p><strong>Pitanja:</strong> Kviz se sastoji od <strong>30 pitanja</strong>, podeljenih u tri te≈æine:</p>
                <p class="mb-3">
                    <strong>‚Ä¢</strong> 10 lakih pitanja<br>
                    <strong>‚Ä¢</strong> 10 srednjih pitanja<br>
                    <strong>‚Ä¢</strong> 10 te≈°kih pitanja
                </p>
                <p class="mb-3"><strong>Bodovanje:</strong> ≈†to br≈æe odgovorite na pitanje, vi≈°e bodova osvajate. Pazite na vreme, jer svaki sekund se raƒçuna!</p>
                <p><strong>Teme pitanja:</strong> Mo≈æete oƒçekivati pitanja o:</p>
                <p>
                    <strong>‚Ä¢</strong> Prepoznavanju zastava<br>
                    <strong>‚Ä¢</strong> Glavnim gradovima<br>
                    <strong>‚Ä¢</strong> Broju stanovnika<br>
                    <strong>‚Ä¢</strong> Kontinentima i jo≈° mnogo toga!
                </p>
            </div>
        </div>
        <button id="start-button" class="btn dugme mt-4 kvizDugme" onclick="startQuiz()">Kreni kviz</button>
    </section>

    <div class="container">
        <div class="quiz-container" id="quiz" style="display: none;">
            <div class="quiz-header">
                <h2>Interactive Quiz</h2>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0"
                        aria-valuemax="100"></div>
                </div>
            </div>
            <div id="question-container">
                <p class="question" id="question"></p>
                <div class="options" id="options"></div>
            </div>
            <div class="quiz-footer">
                <div class="timer" id="timer">Time: 10:00</div>
                <button class="btn btn-primary" id="next-btn">Next</button>
            </div>
        </div>
    </div>

    <%- include("./partials/footer.ejs") %>
    <script>
        // Pretpostavka: `questions` je niz sa podacima o pitanjima
        const quizData = JSON.parse('<%- JSON.stringify(questions) %>');
    let currentQuestion = 0;
    let score = 0;
    let timer;
    let totalTime = 10 * 60; // 10 minuta u sekundama
    let timeLeft = totalTime;

    const questionEl = document.getElementById('question');
    const optionsEl = document.getElementById('options');
    const nextBtn = document.getElementById('next-btn');
    const timerEl = document.getElementById('timer');
    const progressBar = document.querySelector('.progress-bar');
    const quizContainer = document.getElementById('quiz');
    const startContainer = document.getElementById('start-container');


        // Funkcija za poƒçetak kviza
        function startQuiz() {
        startContainer.style.display = 'none';
        quizContainer.style.display = 'block';
        loadQuestion();
        startTimer(); // Pokreni tajmer kad kviz poƒçne
    }

    // Funkcija za uƒçitavanje pitanja
    function loadQuestion() {
        const question = quizData[currentQuestion];
        questionEl.textContent = question.tekstPitanja;
        optionsEl.innerHTML = '';

        // Kombinovanje taƒçnog i netaƒçnih odgovora
        const allAnswers = [...question.answers, question.tacanOdgovor];
        allAnswers.sort(() => Math.random() - 0.5); // Me≈°anje odgovora

        // Kreiranje dugmiƒáa za odgovore
        allAnswers.forEach((option) => {
            const button = document.createElement('button');
            button.textContent = option;
            button.classList.add('option');
            button.addEventListener('click', () => selectOption(button, option));
            optionsEl.appendChild(button);
        });

        nextBtn.style.display = 'none';
    }

    // Funkcija za selekciju odgovora
    function selectOption(selectedButton, selectedAnswer) {
        const question = quizData[currentQuestion];

        // Onemoguƒái sve opcije da ne budu klikabilne
        Array.from(optionsEl.children).forEach(button => {
            button.disabled = true;
            if (button.textContent === question.tacanOdgovor) {
                button.classList.add('correct'); // Obele≈æi taƒçan odgovor
            } else {
                button.classList.add('incorrect'); // Obele≈æi netaƒçne odgovore
            }
        });

        // Obele≈æi izabranu opciju kao taƒçnu ili netaƒçnu
        if (selectedAnswer === question.tacanOdgovor) {
            score++;
            selectedButton.classList.add('correct');
        } else {
            selectedButton.classList.add('incorrect');
        }

        // Prika≈æi dugme "Next" za prelazak na sledeƒáe pitanje
        nextBtn.style.display = 'block';

        // Zaustavi tajmer (ako je u toku)
    }


        // Funkcija za pokretanje tajmera
        function startTimer() {
        timer = setInterval(() => {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerEl.textContent = `Time: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

            // Kada vreme istekne, zavr≈°ava se kviz
            if (timeLeft === 0) {
                clearInterval(timer);
                showResults();
            }
        }, 1000);
    }
        // Funkcija za proveru odgovora
        function checkAnswer() {
            const selectedOption = document.querySelector('.option.selected');
            if (!selectedOption) return;

            const question = quizData[currentQuestion];
            const selectedAnswer = selectedOption.textContent;

            Array.from(optionsEl.children).forEach(button => {
                button.disabled = true;
                if (button.textContent === question.tacanOdgovor) {
                    button.classList.add('correct');
                } else {
                    button.classList.add('incorrect');
                }
            });

            clearInterval(timer);
        }

        // Funkcija za a≈æuriranje progresa
        function updateProgress() {
        const progress = ((currentQuestion + 1) / quizData.length) * 100;
        progressBar.style.width = `${progress}%`;
        progressBar.setAttribute('aria-valuenow', progress);
    }

        // Funkcija za prikaz rezultata
        function showResults() {
            quizContainer.innerHTML = `
                <div class="results">
                    <div class="result-icon">
                        <i class="fas ${score > quizData.length / 2 ? 'fa-trophy text-success' : 'fa-times-circle text-danger'}"></i>
                    </div>
                    <div class="score">Your score: ${score}/${quizData.length}</div>
                    <p>Time left: ${Math.floor(timeLeft / 60)}:${ timeLeft % 60}</p>
                    <p>${score > quizData.length / 2 ? 'Great job!' : 'Better luck next time!'}</p>
                    <button class="btn btn-primary" onclick="location.reload()">Restart Quiz</button>
                </div>
            `;
            sendResultsToServer();
        }

        // Funkcionalnost za dugme "Next"
        nextBtn.addEventListener('click', () => {
            currentQuestion++;
            if (currentQuestion < quizData.length) {
                loadQuestion();
            } else {
                showResults();
            }
        });
        function sendResultsToServer() {
    const resultData = {
        score: score,         // Rezultat korisnika
        time: timeLeft,
        user: `<%= user.username%>`  // Vreme koje je pro≈°lo
    };
    console.log(resultData)
    // Slanje POST zahteva na server
    fetch('/api/quiz/results', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(resultData),
    })
    .then(response => response.json())
    .then(data => {
        console.log('Rezultati su uspe≈°no poslati na server:', data);
    })
    .catch(error => {
        console.error('Do≈°lo je do gre≈°ke pri slanju rezultata:', error);
    });
}
    </script>
</body>

</html>
